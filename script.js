let x1 = tf.tensor2d([[0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.5],
[0.0, 0.0, 0.0, 1.0],
[0.0, 0.0, 0.5, 0.0],
[0.0, 0.0, 0.5, 0.5],
[0.0, 0.0, 0.5, 1.0],
[0.0, 0.0, 1.0, 0.0],
[0.0, 0.0, 1.0, 0.5],
[0.0, 0.0, 1.0, 1.0],
[0.0, 0.5, 0.0, 0.0],
[0.0, 0.5, 0.0, 0.5],
[0.0, 0.5, 0.0, 1.0],
[0.0, 0.5, 0.5, 0.0],
[0.0, 0.5, 0.5, 0.5],
[0.0, 0.5, 0.5, 1.0],
[0.0, 0.5, 1.0, 0.0],
[0.0, 0.5, 1.0, 0.5],
[0.0, 0.5, 1.0, 1.0],
[0.0, 1.0, 0.0, 0.0],
[0.0, 1.0, 0.0, 0.5],
[0.0, 1.0, 0.0, 1.0],
[0.0, 1.0, 0.5, 0.0],
[0.0, 1.0, 0.5, 0.5],
[0.0, 1.0, 0.5, 1.0],
[0.0, 1.0, 1.0, 0.0],
[0.0, 1.0, 1.0, 0.5],
[0.0, 1.0, 1.0, 1.0],
[0.5, 0.0, 0.0, 0.0],
[0.5, 0.0, 0.0, 0.5],
[0.5, 0.0, 0.0, 1.0],
[0.5, 0.0, 0.5, 0.0],
[0.5, 0.0, 0.5, 0.5],
[0.5, 0.0, 0.5, 1.0],
[0.5, 0.0, 1.0, 0.0],
[0.5, 0.0, 1.0, 0.5],
[0.5, 0.0, 1.0, 1.0],
[0.5, 0.5, 0.0, 0.0],
[0.5, 0.5, 0.0, 0.5],
[0.5, 0.5, 0.0, 1.0],
[0.5, 0.5, 0.5, 0.0],
[0.5, 0.5, 0.5, 0.5],
[0.5, 0.5, 0.5, 1.0],
[0.5, 0.5, 1.0, 0.0],
[0.5, 0.5, 1.0, 0.5],
[0.5, 0.5, 1.0, 1.0],
[0.5, 1.0, 0.0, 0.0],
[0.5, 1.0, 0.0, 0.5],
[0.5, 1.0, 0.0, 1.0],
[0.5, 1.0, 0.5, 0.0],
[0.5, 1.0, 0.5, 0.5],
[0.5, 1.0, 0.5, 1.0],
[0.5, 1.0, 1.0, 0.0],
[0.5, 1.0, 1.0, 0.5],
[0.5, 1.0, 1.0, 1.0],
[1.0, 0.0, 0.0, 0.0],
[1.0, 0.0, 0.0, 0.5],
[1.0, 0.0, 0.0, 1.0],
[1.0, 0.0, 0.5, 0.0],
[1.0, 0.0, 0.5, 0.5],
[1.0, 0.0, 0.5, 1.0],
[1.0, 0.0, 1.0, 0.0],
[1.0, 0.0, 1.0, 0.5],
[1.0, 0.0, 1.0, 1.0],
[1.0, 0.5, 0.0, 0.0],
[1.0, 0.5, 0.0, 0.5],
[1.0, 0.5, 0.0, 1.0],
[1.0, 0.5, 0.5, 0.0],
[1.0, 0.5, 0.5, 0.5],
[1.0, 0.5, 0.5, 1.0],
[1.0, 0.5, 1.0, 0.0],
[1.0, 0.5, 1.0, 0.5],
[1.0, 0.5, 1.0, 1.0],
[1.0, 1.0, 0.0, 0.0],
[1.0, 1.0, 0.0, 0.5],
[1.0, 1.0, 0.0, 1.0],
[1.0, 1.0, 0.5, 0.0],
[1.0, 1.0, 0.5, 0.5],
[1.0, 1.0, 0.5, 1.0],
[1.0, 1.0, 1.0, 0.0],
[1.0, 1.0, 1.0, 0.5]])

let y = tf.tensor2d([[0,	-1],
    [-1,	-1],
    [-1,	0],
    [0,	-1],
    [-1,	-1],
    [-1,	0],
    [0,	-1],
    [-1,	-1],
    [-1,	0],
    [0,	-1],
    [1,	-1],
    [1,	0],
    [0,	-1],
    [1,	-1],
    [1,	0],
    [0,	-1],
    [1,	-1],
    [1,	0],
    [0,	-1],
    [1,	-1],
    [1,	0],
    [0,	-1],
    [1,	-1],
    [1,	0],
    [0,	-1],
    [1,	-1],
    [1,	0],
    [0,	-1],
    [-1,	-1],
    [-1,	0],
    [0,	-1],
    [-1,	-1],
    [-1,	0],
    [0,	-1],
    [-1,	-1],
    [-1,	0],
    [0,	-1],
    [1,	-1],
    [1,	0],
    [0,	-1],
    [1,	-1],
    [1,	0],
    [0,	-1],
    [1,	-1],
    [1,	0],
    [0,	-1],
    [1,	-1],
    [1,	0],
    [0,	-1],
    [1,	-1],
    [1,	0],
    [0,	-1],
    [1,	-1],
    [1,	0],
    [0,	-1],
    [-1,	-1],
    [-1,	0],
    [0,	-1],
    [-1,	-1],
    [-1,	0],
    [0,	-1],
    [-1,	-1],
    [-1,	0],
    [0,	-1],
    [-1,	-1],
    [-1,	1],
    [0,	-1],
    [-1,	-1],
    [-1,	1],
    [0,	-1],
    [-1,	-1],
    [-1,	0],
    [0,	-1],
    [0,	1],
    [0,	1],
    [0,	-1],
    [0,	-1],
    [0,	1],
    [0,	-1],
    [0,	-1]
    ])

const modelo = tf.sequential()

modelo.add(tf.layers.dense({units:6, inputShape:[4]}))
modelo.add(tf.layers.dense({units:6}))
modelo.add(tf.layers.dense({units:6}))
modelo.add(tf.layers.dense({units:6}))
modelo.add(tf.layers.dense({units:2}))

modelo.compile({
    optimizer: tf.train.adam(0.1),
    loss: tf.losses.meanSquaredError,
  })

modelo.fit(x1, y, epochs = 1000, verbose = false)
arr = tf.tensor2d([[0, 0, 0, 0]])
const resultado = modelo.predict(arr).data()
console.log(resultado)
