let x = tf.tensor2d([[0.0, 0.0, 0.0, 0.0],
[0.0, 0.0, 0.0, 0.5],
[0.0, 0.0, 0.0, 1.0],
[0.0, 0.0, 0.5, 0.0],
[0.0, 0.0, 0.5, 0.5],
[0.0, 0.0, 0.5, 1.0],
[0.0, 0.0, 1.0, 0.0],
[0.0, 0.0, 1.0, 0.5],
[0.0, 0.0, 1.0, 1.0],
[0.0, 0.5, 0.0, 0.0],
[0.0, 0.5, 0.0, 0.5],
[0.0, 0.5, 0.0, 1.0],
[0.0, 0.5, 0.5, 0.0],
[0.0, 0.5, 0.5, 0.5],
[0.0, 0.5, 0.5, 1.0],
[0.0, 0.5, 1.0, 0.0],
[0.0, 0.5, 1.0, 0.5],
[0.0, 0.5, 1.0, 1.0],
[0.0, 1.0, 0.0, 0.0],
[0.0, 1.0, 0.0, 0.5],
[0.0, 1.0, 0.0, 1.0],
[0.0, 1.0, 0.5, 0.0],
[0.0, 1.0, 0.5, 0.5],
[0.0, 1.0, 0.5, 1.0],
[0.0, 1.0, 1.0, 0.0],
[0.0, 1.0, 1.0, 0.5],
[0.0, 1.0, 1.0, 1.0],
[0.5, 0.0, 0.0, 0.0],
[0.5, 0.0, 0.0, 0.5],
[0.5, 0.0, 0.0, 1.0],
[0.5, 0.0, 0.5, 0.0],
[0.5, 0.0, 0.5, 0.5],
[0.5, 0.0, 0.5, 1.0],
[0.5, 0.0, 1.0, 0.0],
[0.5, 0.0, 1.0, 0.5],
[0.5, 0.0, 1.0, 1.0],
[0.5, 0.5, 0.0, 0.0],
[0.5, 0.5, 0.0, 0.5],
[0.5, 0.5, 0.0, 1.0],
[0.5, 0.5, 0.5, 0.0],
[0.5, 0.5, 0.5, 0.5],
[0.5, 0.5, 0.5, 1.0],
[0.5, 0.5, 1.0, 0.0],
[0.5, 0.5, 1.0, 0.5],
[0.5, 0.5, 1.0, 1.0],
[0.5, 1.0, 0.0, 0.0],
[0.5, 1.0, 0.0, 0.5],
[0.5, 1.0, 0.0, 1.0],
[0.5, 1.0, 0.5, 0.0],
[0.5, 1.0, 0.5, 0.5],
[0.5, 1.0, 0.5, 1.0],
[0.5, 1.0, 1.0, 0.0],
[0.5, 1.0, 1.0, 0.5],
[0.5, 1.0, 1.0, 1.0],
[1.0, 0.0, 0.0, 0.0],
[1.0, 0.0, 0.0, 0.5],
[1.0, 0.0, 0.0, 1.0],
[1.0, 0.0, 0.5, 0.0],
[1.0, 0.0, 0.5, 0.5],
[1.0, 0.0, 0.5, 1.0],
[1.0, 0.0, 1.0, 0.0],
[1.0, 0.0, 1.0, 0.5],
[1.0, 0.0, 1.0, 1.0],
[1.0, 0.5, 0.0, 0.0],
[1.0, 0.5, 0.0, 0.5],
[1.0, 0.5, 0.0, 1.0],
[1.0, 0.5, 0.5, 0.0],
[1.0, 0.5, 0.5, 0.5],
[1.0, 0.5, 0.5, 1.0],
[1.0, 0.5, 1.0, 0.0],
[1.0, 0.5, 1.0, 0.5],
[1.0, 0.5, 1.0, 1.0],
[1.0, 1.0, 0.0, 0.0],
[1.0, 1.0, 0.0, 0.5],
[1.0, 1.0, 0.0, 1.0],
[1.0, 1.0, 0.5, 0.0],
[1.0, 1.0, 0.5, 0.5],
[1.0, 1.0, 0.5, 1.0],
[1.0, 1.0, 1.0, 0.0],
[1.0, 1.0, 1.0, 0.5]]);

let y = tf.tensor2d([[0,	-1],
[-1,	-1],
[-1,	0],
[0,	-1],
[-1,	-1],
[-1,	0],
[0,	-1],
[-1,	-1],
[-1,	0],
[0,	-1],
[1,	-1],
[1,	0],
[0,	-1],
[1,	-1],
[1,	0],
[0,	-1],
[1,	-1],
[1,	0],
[0,	-1],
[1,	-1],
[1,	0],
[0,	-1],
[1,	-1],
[1,	0],
[0,	-1],
[1,	-1],
[1,	0],
[0,	-1],
[-1,	-1],
[-1,	0],
[0,	-1],
[-1,	-1],
[-1,	0],
[0,	-1],
[-1,	-1],
[-1,	0],
[0,	-1],
[1,	-1],
[1,	0],
[0,	-1],
[1,	-1],
[1,	0],
[0,	-1],
[1,	-1],
[1,	0],
[0,	-1],
[1,	-1],
[1,	0],
[0,	-1],
[1,	-1],
[1,	0],
[0,	-1],
[1,	-1],
[1,	0],
[0,	-1],
[-1,	-1],
[-1,	0],
[0,	-1],
[-1,	-1],
[-1,	0],
[0,	-1],
[-1,	-1],
[-1,	0],
[0,	-1],
[-1,	-1],
[-1,	1],
[0,	-1],
[-1,	-1],
[-1,	1],
[0,	-1],
[-1,	-1],
[-1,	0],
[0,	-1],
[0,	1],
[0,	1],
[0,	-1],
[0,	-1],
[0,	1],
[0,	-1],
[0,	-1]
]);

// const modelo = tf.sequential()
// modelo.add([oculta1,oculta2,oculta3,oculta4, salida])
const modelo = tf.sequential()
modelo.add(tf.layers.dense({units:6, inputShape:[4]}))
modelo.add(tf.layers.dense({units:6}))
modelo.add(tf.layers.dense({units:2}))
modelo.compile({
    loss: 'meanSquaredError',
    optimizer: 'adam'
  })
let historial = modelo.fit(x, y, {epochs:1000, verbose:false})